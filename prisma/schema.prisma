generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  status         Boolean       @default(true)
  createdAt      DateTime      @default(now()) @map(name: "created_at")
  updatedAt      DateTime      @default(now()) @map(name: "updated_at")
  accounts       Account[]
  sessions       Session[]
  ownedCompanies Company[]     @relation("Owner")
  teams          UserTeam[]
  chatMessages   ChatMessage[]
  companies      Company[]     @relation("UserCompany")
  UserCompany    UserCompany[]
  Subscription   Subscription?
}

model Company {
  id                   String                 @id @default(cuid())
  name                 String
  createdAt            DateTime               @default(now()) @map(name: "created_at")
  updatedAt            DateTime               @default(now()) @map(name: "updated_at")
  owner                User                   @relation("Owner", fields: [ownerId], references: [id])
  ownerId              String
  status               Boolean                @default(true)
  default              Boolean                @default(false)
  channels             Channel[]
  flows                Flow[]
  teams                Team[]
  settings             CompanySettings[]
  customers            Customer[]
  campaigns            Campaign[]
  chats                Chat[]
  notificationSettings NotificationSettings[]
  users                User[]                 @relation("UserCompany")
  UserCompany          UserCompany[]
}

model CompanySettings {
  id                     String               @id @default(cuid())
  companyId              String
  company                Company              @relation(fields: [companyId], references: [id])
  timeZone               String
  language               String               @default("EN")
  currency               String
  notificationSettingsId String
  notificationSettings   NotificationSettings @relation(fields: [notificationSettingsId], references: [id])
}

model NotificationSettings {
  id                 String            @id @default(cuid())
  emailNotifications Boolean           @default(true)
  pushNotifications  Boolean           @default(true)
  smsNotifications   Boolean           @default(true)
  companyId          String
  company            Company           @relation(fields: [companyId], references: [id])
  CompanySettings    CompanySettings[]
}

model UserCompany {
  id        String  @id @default(cuid())
  userId    String
  companyId String
  user      User    @relation(fields: [userId], references: [id])
  company   Company @relation(fields: [companyId], references: [id])

  @@unique([userId, companyId])
}

enum SubscriptionPlan {
  FREE
  PRO
}

model Subscription {
  id               String           @id @default(cuid())
  userId           String           @unique
  user             User             @relation(fields: [userId], references: [id])
  plan             SubscriptionPlan @default(FREE)
  maxCompanies     Int              @default(1)
  maxTeams         Int              @default(1)
  maxUsers         Int              @default(1)
  maxChannels      Int              @default(1)
  maxFlows         Int              @default(1)
  monthlyPrice     Int?
  currentPeriodEnd DateTime?
  active           Boolean          @default(true)
  createdAt        DateTime         @default(now()) @map(name: "created_at")
  updatedAt        DateTime         @default(now()) @map(name: "updated_at")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String     @id @default(cuid())
  name        String
  description String
  noOfSeats   Int        @default(1)
  companyId   String
  status      Boolean    @default(true)
  company     Company    @relation(fields: [companyId], references: [id])
  channels    Channel[]  @relation("ChannelToTeams")
  members     UserTeam[]
}

model UserTeam {
  id     String  @id @default(cuid())
  userId String
  teamId String
  status Boolean @default(true)
  user   User    @relation(fields: [userId], references: [id])
  team   Team    @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
}

model Flow {
  id          String   @id @default(cuid())
  name        String
  description String?
  flowData    Json?
  companyId   String
  published   Boolean  @default(false)
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

enum ChannelType {
  WHATSAPP
  TWITTER
  FACEBOOK
  TIKTOK
  SMS
}

model Channel {
  id          String      @id @default(cuid())
  name        String
  description String
  status      Boolean     @default(true)
  companyId   String
  type        ChannelType
  identifier  String?
  authDetails Json?
  integrated  Boolean     @default(false)
  teams       Team[]      @relation("ChannelToTeams")
  chats       Chat[]
  company     Company     @relation(fields: [companyId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
}

model Customer {
  id             String   @id @default(cuid())
  fullNames      String
  identification String?  @unique
  email          String?  @unique
  phone          String?  @unique
  occupation     String?
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @map(name: "updated_at")
  companyId      String
  company        Company  @relation(fields: [companyId], references: [id])
  Chat           Chat[]
}

enum CampaignStatus {
  PLANNED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELED
}

enum CampaignAudience {
  INTERNAL
  GLOBAL
}

model Campaign {
  id          String         @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  audience        CampaignAudience
  status      CampaignStatus
  companyId   String
  company     Company        @relation(fields: [companyId], references: [id])
}

enum ChatType {
  AUTOMATED
  INTERACTIVE
}

model Chat {
  id           String        @id @default(cuid())
  type         ChatType
  channelId    String
  channel      Channel       @relation(fields: [channelId], references: [id])
  companyId    String
  company      Company       @relation(fields: [companyId], references: [id])
  customerId   String
  customer     Customer      @relation(fields: [customerId], references: [id])
  externalRef  String
  timestamp    DateTime      @default(now())
  chatMessages ChatMessage[]
}

enum MessageDirection {
  OUTGOING
  INCOMING
}

enum MessageType {
  AUTOMATED
  INTERACTIVE
}

model ChatMessage {
  id             String           @id @default(cuid())
  chatId         String
  chat           Chat             @relation(fields: [chatId], references: [id])
  externalRef    String?          @unique
  userId         String?
  user           User?            @relation(fields: [userId], references: [id])
  message        String
  direction      MessageDirection
  type           MessageType
  externalStatus String?
  internalStatus String?
  timestamp      DateTime         @default(now())
}
